// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Researches a given daily topic using online sources.
 *
 * - researchDailyTopic - A function that handles the research process.
 * - ResearchDailyTopicInput - The input type for the researchDailyTopic function.
 * - ResearchDailyTopicOutput - The return type for the researchDailyTopic function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const ResearchDailyTopicInputSchema = z.object({
  topic: z.string().describe('The daily topic to research.'),
});
export type ResearchDailyTopicInput = z.infer<typeof ResearchDailyTopicInputSchema>;

const ResearchDailyTopicOutputSchema = z.object({
  summary: z.string().describe('A summary of the research on the daily topic.'),
  keyFindings: z.array(z.string()).describe('Key findings from the research.'),
  relevantLinks: z.array(z.string()).describe('Relevant links from the research.'),
});
export type ResearchDailyTopicOutput = z.infer<typeof ResearchDailyTopicOutputSchema>;

export async function researchDailyTopic(input: ResearchDailyTopicInput): Promise<ResearchDailyTopicOutput> {
  return researchDailyTopicFlow(input);
}

const prompt = ai.definePrompt({
  name: 'researchDailyTopicPrompt',
  input: {
    schema: z.object({
      topic: z.string().describe('The daily topic to research.'),
    }),
  },
  output: {
    schema: z.object({
      summary: z.string().describe('A summary of the research on the daily topic.'),
      keyFindings: z.array(z.string()).describe('Key findings from the research.'),
      relevantLinks: z.array(z.string()).describe('Relevant links from the research.'),
    }),
  },
  prompt: `You are an AI research assistant. Your task is to research the given daily topic and provide a summary, key findings, and relevant links.\n\nTopic: {{{topic}}}\n\nSummary: A concise summary of the topic.\nKey Findings: A list of key findings from the research.\nRelevant Links: A list of relevant links used for the research.`, 
});

const researchDailyTopicFlow = ai.defineFlow<
  typeof ResearchDailyTopicInputSchema,
  typeof ResearchDailyTopicOutputSchema
>({
  name: 'researchDailyTopicFlow',
  inputSchema: ResearchDailyTopicInputSchema,
  outputSchema: ResearchDailyTopicOutputSchema,
}, async input => {
  const {output} = await prompt(input);
  return output!;
});
